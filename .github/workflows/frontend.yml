name: Frontend CI/CD

on: 
  push:
    branches:
      - main

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with: 
          node-version: latest
          cache: 'npm'

      - name: Install Dependencies, Lint and Test Code
        run: |
          npm ci
          npm run lint
          npm test
          
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v5.0.0
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image 
        id: build-image
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: Docker/frontend/frontend-Docker
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.login-ecr.outputs.registry }}/ml-investment-planner/frontend:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}/api

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ steps.build-image.outputs.imageid }}
          exit-code: '1'
          severity: 'CRITICAL'
          format: 'table'

      - name: Push Image to ECR
        if: success()
        run: docker push ${{ steps.login-ecr.outputs.registry }}/ml-investment-planner/frontend:${{ github.sha }}

      - name: Setup Helm
        uses: azure/setup-helm@v4.3.0
        with: 
          version: 'latest'

      - name: Deploy to EKS with Helm
        run: |
          aws eks update-kubeconfig --region eu-west-1 --name ml-investment-planner-eks
          helm upgrade --install frontend ./helm/frontend \
            --set image.repository=${{ steps.login-ecr.outputs.registry }}/ml-investment-planner/frontend \
            --set image.tag=${{ github.sha }}
          kubectl create namespace monitoring
          helm install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set grafana.adminPassword=admin
          kubectl port-forward -n monitoring svc/prometheus-grafana 3000:80
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          
            